
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  name             String
  lastName         String
  role             Role               @default(CLIENT)
  LikesOnProduct   LikesOnProduct[]
  Cart             Cart []
  Order            Order[]
  sessions  Session[]

  @@index([email])
}
enum Role {
  CLIENT
  MANAGER
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt DateTime

  @@index([userId])
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  slug    String    @unique
  Product Product[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  stock          Int
  categoryId     Int
  isDisabled     Boolean          @default(false)
  category       Category         @relation(fields: [categoryId], references: [id])
  CartItem       CartItem[]
  LikesOnProduct LikesOnProduct[]
  likesCount     Int              @default(0)
  OrderItem      OrderItem[]
  Image          Image[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?

  @@index([categoryId])
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  filename  String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model LikesOnProduct {
  productId Int
  userId    Int
  likedAt   DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt      DateTime         @default(now())

  @@id([userId, productId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  cartItem  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model CartItem {
  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([cartId, productId])
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  orderItem OrderItem[]
  total     Float
  createdAt DateTime    @default(now())

}

model OrderItem {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  price     Float
  quantity  Int
  Order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
} 